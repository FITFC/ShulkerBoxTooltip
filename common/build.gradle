plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

archivesBaseName = "${rootProject.projectArchiveBaseName}-common"

architectury {
    common(rootProject.enabledPlatforms.split(','))
}

loom {
    accessWidenerPath = file('src/main/resources/shulkerboxtooltip.accesswidener')
}

configurations {
    shadowCommon
}

dependencies {
    // We depend on fabric loader here to use the fabric @Environment annotations and get the mixin dependencies
    // Do NOT use other classes from fabric loader
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabricLoaderVersion}"

    // Nullable annotations.
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'org.jetbrains:annotations:23.0.0'

    // Jankson
    compileOnly "blue.endless:jankson:${rootProject.janksonVersion}"
    shadowCommon "blue.endless:jankson:${rootProject.janksonVersion}"
}

javadoc {
    exclude 'com/misterpemodder/shulkerboxtooltip/impl/**'
    exclude 'com/misterpemodder/shulkerboxtooltip/mixin/**'
    exclude 'com/misterpemodder/shulkerboxtooltip/*.java'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

shadowJar {
    relocate 'blue.endless.jankson', "${rootProject.group}.shulkerboxtooltip.shadowed.blue.endless.jankson"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set('dev-shadow')
}

remapJar {
    inputFile = shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            groupId = project.group
            artifactId = project.archivesBaseName
            version = project.version

            artifact(remapJar) {
                builtBy remapJar
            }

            artifact(remapSourcesJar) {
                builtBy remapSourcesJar
            }

            pom rootProject.ext.makePom(project)
        }

        mavenCommonMojmap(MavenPublication) {
            groupId = project.group
            artifactId = project.archivesBaseName + "-mojmap"
            version = project.version

            artifact(shadowJar) {
                builtBy shadowJar
                setClassifier null
            }

            artifact(sourcesJar) {
                builtBy sourcesJar
            }

            artifact(javadocJar) {
                builtBy javadocJar
            }

            pom rootProject.ext.makePom(project)
        }
    }
}

signing {
    def signingKey = findProperty('signingKey')
    def signingPassword = findProperty('signingPassword')
    if (signingKey && signingPassword) {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.mavenCommon
        sign publishing.publications.mavenCommonMojmap
    } else {
        println("${project.name}: skipping jar signing")
    }
}
